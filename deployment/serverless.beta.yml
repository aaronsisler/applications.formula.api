service: formula-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: beta
  region: us-east-1
  iam:
    role: arn:aws:iam::654918520080:role/APIG-LAMBDA-DDB
  apiGateway:
    shouldStartNameWithService: true
    usagePlan:
      quota:
        limit: 500
        offset: 0
        period: MONTH
      throttle:
        burstLimit: 20
        rateLimit: 10
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/GET/*
          - execute-api:/*/POST/*
          - execute-api:/*/OPTIONS/*
        Condition:
          IpAddress:
            aws:SourceIp: ${file(./deployment/cors.json):ipRange}

functions:
  health:
    handler: dist/handlers/health-handler/index.handler
    description: Gateway health check. Responds with current time and a short message.
    events:
      - http:
          path: /health
          method: GET

  user-get:
    handler: dist/handlers/user-get-handler/index.handler
    description: Get a user
    events:
      - http:
          path: /user/{userId}
          method: GET
          request:
            parameters:
              paths:
                userId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  user-post:
    handler: dist/handlers/user-post-handler/index.handler
    description: Create user
    events:
      - http:
          path: /user
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  user-tenant-get:
    handler: dist/handlers/user-tenant-get-handler/index.handler
    description: Get tenants for a user
    events:
      - http:
          path: /user/{userId}/tenant
          method: GET
          request:
            parameters:
              paths:
                userId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  user-tenant-post:
    handler: dist/handlers/user-tenant-post-handler/index.handler
    description: Add tenant to user
    events:
      - http:
          path: /user/tenant
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  tenants-get-one:
    handler: dist/handlers/tenants-get-one-handler/index.handler
    description: Get a tenant
    events:
      - http:
          path: /tenants/{tenantId}
          method: GET
          request:
            parameters:
              paths:
                tenantId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  tenants-post:
    handler: dist/handlers/tenant-post-handler/index.handler
    description: Create tenant
    events:
      - http:
          path: /tenants
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  tenants-get:
    handler: dist/handlers/tenants-get-handler/index.handler
    description: Get a tenant
    events:
      - http:
          path: /tenants
          method: GET
          cors:
            headers: ${file(./deployment/cors.json):headers}

  tenant-application-get:
    handler: dist/handlers/tenant-application-get-handler/index.handler
    description: Get applications for a tenant
    events:
      - http:
          path: /tenant/{tenantId}/application
          method: GET
          request:
            parameters:
              paths:
                tenantId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  tenant-application-post:
    handler: dist/handlers/tenant-application-post-handler/index.handler
    description: Add application to a tenant
    events:
      - http:
          path: /tenant/application
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  application-get:
    handler: dist/handlers/application-get-handler/index.handler
    description: Get an application
    events:
      - http:
          path: /application/{applicationId}
          method: GET
          request:
            parameters:
              paths:
                applicationId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  application-post:
    handler: dist/handlers/application-post-handler/index.handler
    description: Create application
    events:
      - http:
          path: /application
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  application-submission-post:
    handler: dist/handlers/application-submission-post-handler/index.handler
    description: Submit application
    events:
      - http:
          path: /application-submission
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  application-applicant-get:
    handler: dist/handlers/application-applicant-get-handler/index.handler
    description: Get application's applicants
    events:
      - http:
          path: /application/{applicationId}/applicant
          method: GET
          request:
            parameters:
              paths:
                applicationId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  application-fields-get:
    handler: dist/handlers/application-fields-get-handler/index.handler
    description: Get application fields for an application
    events:
      - http:
          path: /application/{applicationId}/application-field
          method: GET
          request:
            parameters:
              paths:
                applicationId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

  application-fields-post:
    handler: dist/handlers/application-fields-post-handler/index.handler
    description: Create application fields for a given application
    events:
      - http:
          path: /application/application-field
          method: POST
          cors:
            headers: ${file(./deployment/cors.json):headers}

  applicant-get:
    handler: dist/handlers/applicant-pdf-get-handler/index.handler
    description: Get an applicant's PDF using an S3 signed URL
    events:
      - http:
          path: /applicant/{applicantId}
          method: GET
          request:
            parameters:
              paths:
                applicantId: true
          cors:
            headers: ${file(./deployment/cors.json):headers}

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: formula.otterandcow.com
    basePath: "beta"
    stage: beta
    createRoute53Record: true
